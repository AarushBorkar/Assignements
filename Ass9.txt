#include <iostream>
#include <string>
using namespace std;

enum Color { RED, BLACK };

class RedBlackTree {
private:
        struct Node {
                string dirName;
                Node *left, *right, *parent;
                Color color;

                Node(string name) : dirName(name), left(nullptr), right(nullptr), parent(nullptr), color(RED) {}
        };

        Node *root, *TNULL;

        void leftRotate(Node *x);
        void rightRotate(Node *x);
        void fixInsert(Node *k);
        void fixDelete(Node *x);
        void transplant(Node *u, Node *v);
        void inorderHelper(Node *node);

public:
        RedBlackTree();
        void insert(string dirName);
        void deleteDirectory(string dirName);
        void display();
};

RedBlackTree::RedBlackTree() {
        TNULL = new Node("");
        TNULL->color = BLACK;
        root = TNULL;
}

void RedBlackTree::leftRotate(Node *x) {
        Node *y = x->right;
        x->right = y->left;
        if (y->left != TNULL) {
                y->left->parent = x;
        }
        y->parent = x->parent;
        if (x->parent == nullptr) {
                root = y;
        } else if (x == x->parent->left) {
                x->parent->left = y;
        } else {
                x->parent->right = y;
        }
        y->left = x;
        x->parent = y;
}

void RedBlackTree::rightRotate(Node *x) {
        Node *y = x->left;
        x->left = y->right;
        if (y->right != TNULL) {
                y->right->parent = x;
        }
        y->parent = x->parent;
        if (x->parent == nullptr) {
                root = y;
        } else if (x == x->parent->right) {
                x->parent->right = y;
        } else {
                x->parent->left = y;
        }
        y->right = x;
        x->parent = y;
}

void RedBlackTree::fixInsert(Node *k) {
        Node *u;
        while (k->parent->color == RED) {
                if (k->parent == k->parent->parent->right) {
                        u = k->parent->parent->left;
                        if (u->color == RED) {
                                u->color = BLACK;
                                k->parent->color = BLACK;
                                k->parent->parent->color = RED;
                                k = k->parent->parent;
                        } else {
                                if (k == k->parent->left) {
                                        k = k->parent;
                                        rightRotate(k);
                                }
                                k->parent->color = BLACK;
                                k->parent->parent->color = RED;
                                leftRotate(k->parent->parent);
                        }
                } else {
                        u = k->parent->parent->right;
                        if (u->color == RED) {
                                u->color = BLACK;
                                k->parent->color = BLACK;
                                k->parent->parent->color = RED;
                                k = k->parent->parent;
                        } else {
                                if (k == k->parent->right) {
                                        k = k->parent;
                                        leftRotate(k);
                                }
                                k->parent->color = BLACK;
                                k->parent->parent->color = RED;
                                rightRotate(k->parent->parent);
                        }
                }
                if (k == root) {
                        break;
                }
        }
        root->color = BLACK;
}

void RedBlackTree::insert(string dirName) {
        Node *node = new Node(dirName);
        node->parent = nullptr;
        node->dirName = dirName;
        node->left = TNULL;
        node->right = TNULL;
        node->color = RED;

        Node *y = nullptr;
        Node *x = root;

        while (x != TNULL) {
                y = x;
                if (node->dirName < x->dirName) {
                        x = x->left;
                } else {
                        x = x->right;
                }
        }

        node->parent = y;
        if (y == nullptr) {
                root = node;
        } else if (node->dirName < y->dirName) {
                y->left = node;
        } else {
                y->right = node;
        }

        if (node->parent == nullptr) {
                node->color = BLACK;
                return;
        }

        if (node->parent->parent == nullptr) {
                return;
        }

        fixInsert(node);
}

void RedBlackTree::transplant(Node *u, Node *v) {
        if (u->parent == nullptr) {
                root = v;
        } else if (u == u->parent->left) {
                u->parent->left = v;
        } else {
                u->parent->right = v;
        }
        v->parent = u->parent;
}

void RedBlackTree::deleteDirectory(string dirName) {
        Node *z = root;
        while (z != TNULL) {
                if (z->dirName == dirName) {
                        break;
                } else if (dirName < z->dirName) {
                        z = z->left;
                } else {
                        z = z->right;
                }
        }

        if (z == TNULL) {
                cout << "Directory not found!" << endl;
                return;
        }

        Node *y = z;
        Node *x;
        Color yOriginalColor = y->color;

        if (z->left == TNULL) {
                x = z->right;
                transplant(z, z->right);
        } else if (z->right == TNULL) {
                x = z->left;
                transplant(z, z->left);
        } else {
                y = z->right;
                while (y->left != TNULL) {
                        y = y->left;
                }
                yOriginalColor = y->color;
                x = y->right;
                if (y->parent == z) {
                        x->parent = y;
                } else {
                        transplant(y, y->right);
                        y->right = z->right;
                        y->right->parent = y;
                }
                transplant(z, y);
                y->left = z->left;
                y->left->parent = y;
                y->color = z->color;
        }
        if (yOriginalColor == BLACK) {
                fixDelete(x);
        }
}

void RedBlackTree::fixDelete(Node *x) {
        Node *s;
        while (x != root && x->color == BLACK) {
                if (x == x->parent->left) {
                        s = x->parent->right;
                        if (s->color == RED) {
                                s->color = BLACK;
                                x->parent->color = RED;
                                leftRotate(x->parent);
                                s = x->parent->right;
                        }

                        if (s->left->color == BLACK && s->right->color == BLACK) {
                                s->color = RED;
                                x = x->parent;
                        } else {
                                if (s->right->color == BLACK) {
                                        s->left->color = BLACK;
                                        s->color = RED;
                                        rightRotate(s);
                                        s = x->parent->right;
                                }

                                s->color = x->parent->color;
                                x->parent->color = BLACK;
                                s->right->color = BLACK;
                                leftRotate(x->parent);
                                x = root;
                        }
                } else {
                        s = x->parent->left;
                        if (s->color == RED) {
                                s->color = BLACK;
                                x->parent->color = RED;
                                rightRotate(x->parent);
                                s = x->parent->left;
                        }

                        if (s->right->color == BLACK && s->left->color == BLACK) {
                                s->color = RED;
                                x = x->parent;
                        } else {
                                if (s->left->color == BLACK) {
                                        s->right->color = BLACK;
                                        s->color = RED;
                                        leftRotate(s);
                                        s = x->parent->left;
                                }

                                s->color = x->parent->color;
                                x->parent->color = BLACK;
                                s->left->color = BLACK;
                                rightRotate(x->parent);
                                x = root;
                        }
                }
        }
        x->color = BLACK;
}

void RedBlackTree::inorderHelper(Node *node) {
        if (node != TNULL) {
                inorderHelper(node->left);
                cout << node->dirName << " ";
                inorderHelper(node->right);
        }
}

void RedBlackTree::display() {
        inorderHelper(root);
        cout << endl;
}

int main() {
        RedBlackTree fileSystem;
        int choice;
        string dirName;

        do {
                cout << "\nMenu:\n";
                cout << "1. Insert Directory\n";
                cout << "2. Delete Directory\n";
                cout << "3. Display Directories\n";
                cout << "4. Exit\n";
                cout << "Enter your choice: ";
                cin >> choice;

                switch (choice) {
                        case 1:
                                cout << "Enter directory name to insert: ";
                                cin >> dirName;
                                fileSystem.insert(dirName);
                                break;
                        case 2:
                                cout << "Enter directory name to delete: ";
                                cin >> dirName;
                                fileSystem.deleteDirectory(dirName);
                                break;
                        case 3:
                                cout << "Directory structure: ";
                                fileSystem.display();
                                break;
                        case 4:
                                cout << "Exiting...\n";
                                break;
                        default:
                                cout << "Invalid choice! Try again.\n";
                }
        } while (choice != 4);

        return 0;
}
